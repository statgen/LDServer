#ifndef LDSERVER_SUMMARYSTATISTICSLOADER_H
#define LDSERVER_SUMMARYSTATISTICSLOADER_H

#include <string>
#include <set>
#include <vector>
#include <map>
#include <memory>
#include <limits>
#include <tabixpp.hpp>
#include <boost/format.hpp>
#include <arrow/api.h>
#include <parquet/file_reader.h>
#include <parquet/properties.h>
#include <parquet/printer.h>
#include <parquet/stream_reader.h>
#include <arrow/filesystem/localfs.h>
#include <arrow/io/file.h>
#include <arrow/result.h>
#include <IntervalTree.h>
#include <boost/iostreams/filtering_streambuf.hpp>
#include <boost/iostreams/filter/gzip.hpp>
#include <regex>
#include <functional>
#include "Types.h"

const uint32_t INIT_QUERY_LIMIT = 10000000;

enum class ScoreCovFormat {RVTEST, RAREMETAL, METASTAAR};

class NoVariantsInRange : public std::runtime_error { using std::runtime_error::runtime_error; };

/* Single parameter versions of string conversion functions */
inline unsigned long long spstoull(const string& s) { return stoull(s); }
inline uint64_t spstoull_uint64(const string& s) {
  double d = stod(s);
  auto l = static_cast<uint64_t>(d);
  return l;
}
inline unsigned long spstoul(const string& s) { return stoul(s); }
inline double spstod(const string& s) { return stod(s); }
inline int spstoi(const string& s) { return stoi(s); }
inline string stos(const string& s) { return s; }

/**
 * Loader for "summary statistic" datasets. These are comprised of:
 *
 *   1. A file of score statistics per single variant (along with other information such as p-value, effect size, etc.)
 *   2. A file of the covariance of the score statistics for each pair of variants (usually in a sliding window across the genome)
 *
 * These files are usually generated by either rvtests, or RAREMETALWORKER. They are normally used for conducting either
 * single variant meta-analysis, or meta-analysis of gene-based aggregation tests such as the burden or SKAT test.
 *
 * https://github.com/zhanxw/rvtests#meta-analysis-models
 * https://genome.sph.umich.edu/wiki/RAREMETALWORKER
 */
class SummaryStatisticsLoader {
public:
  /**
   * Load a region of score statistics and covariances into memory.
   * @param chromosome Chromosome.
   * @param start Integer start position of the region.
   * @param end Integer end position of the region.
   */
  virtual void load_region(const std::string& chromosome, uint64_t start, uint64_t stop) = 0;

  // Return the covariances.
  virtual shared_ptr<LDQueryResult> getCovResult() = 0;

  // Return the score statistics.
  virtual shared_ptr<ScoreStatQueryResult> getScoreResult() = 0;

  /**
   * Getter to return the residual variance under the null model.
   * @return sigma2
   */
  virtual double getSigma2() = 0;

  /**
   * Getter to return number of samples used when calculating scores/covariances.
   * @return nsamples
   */
  virtual uint64_t getNumSamples() = 0;

  // Destructor
  virtual ~SummaryStatisticsLoader() = default;
};

#endif //LDSERVER_SUMMARYSTATISTICSLOADER_H
